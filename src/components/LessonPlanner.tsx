import { useState } from 'react';
import './LessonPlanner.css';

interface LessonPlan {
  topic: string;
  vocabulary: string[];
  discussionQuestions: string[];
  quote: string;
  quoteAuthor: string;
}

function LessonPlanner() {
  const [formData, setFormData] = useState({
    level: 'A1',
    focus: 'conversation',
    duration: '45'
  });
  const [lessonPlan, setLessonPlan] = useState<LessonPlan | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const generateLesson = async () => {
    setIsGenerating(true);
    
    // Simulate API call - replace with actual LLM API
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Mock lesson plan generation based on level
    const mockPlans: Record<string, LessonPlan> = {
      'A1': {
        topic: 'Daily Routines & Time',
        vocabulary: ['morning', 'afternoon', 'evening', 'breakfast', 'lunch', 'dinner', 'wake up', 'go to sleep'],
        discussionQuestions: [
          'What time do you wake up every day?',
          'What do you eat for breakfast?',
          'Do you prefer morning or evening? Why?'
        ],
        quote: 'Every morning is a new beginning.',
        quoteAuthor: 'Unknown'
      },
      'A2': {
        topic: 'Hobbies & Free Time Activities',
        vocabulary: ['hobby', 'interest', 'passion', 'free time', 'enjoy', 'practice', 'skill', 'favorite'],
        discussionQuestions: [
          'What do you like to do in your free time?',
          'Do you have any hobbies? How did you start?',
          'Would you like to learn a new skill? Which one?'
        ],
        quote: 'Find a hobby that makes your heart sing.',
        quoteAuthor: 'Unknown'
      },
      'B1': {
        topic: 'Travel & Cultural Experiences',
        vocabulary: ['destination', 'culture', 'tradition', 'explore', 'adventure', 'memory', 'experience', 'journey'],
        discussionQuestions: [
          'What is the most interesting place you have visited?',
          'How do you prepare for a trip?',
          'What cultural differences have you noticed when traveling?'
        ],
        quote: 'Travel is the only thing you buy that makes you richer.',
        quoteAuthor: 'Unknown'
      },
      'B2': {
        topic: 'Technology & Modern Life',
        vocabulary: ['innovation', 'digital', 'impact', 'connectivity', 'balance', 'efficient', 'transform', 'access'],
        discussionQuestions: [
          'How has technology changed the way we communicate?',
          'What are the advantages and disadvantages of social media?',
          'Do you think we depend too much on technology? Why or why not?'
        ],
        quote: 'Technology is best when it brings people together.',
        quoteAuthor: 'Matt Mullenweg'
      }
    };

    const plan = mockPlans[formData.level] || mockPlans['A1'];
    setLessonPlan(plan);
    setIsGenerating(false);
  };

  const copyToClipboard = () => {
    if (!lessonPlan) return;

    const markdown = `
# üìö English Lesson Plan

**Level:** ${formData.level}  
**Focus:** ${formData.focus}  
**Duration:** ${formData.duration} minutes

---

## üéØ Topic
${lessonPlan.topic}

## üìù Vocabulary
${lessonPlan.vocabulary.map((word, i) => `${i + 1}. **${word}**`).join('\n')}

## üí¨ Discussion Questions
${lessonPlan.discussionQuestions.map((q, i) => `${i + 1}. ${q}`).join('\n')}

## ‚ú® Quote of the Day
> *"${lessonPlan.quote}"*  
> ‚Äî ${lessonPlan.quoteAuthor}

---

*Generated by WA ‚Äî Words Between Worlds*
    `.trim();

    navigator.clipboard.writeText(markdown);
    alert('‚úÖ Lesson plan copied to clipboard!');
  };

  const downloadAsMarkdown = () => {
    if (!lessonPlan) return;

    const markdown = `# üìö English Lesson Plan\n\n**Level:** ${formData.level}\n**Focus:** ${formData.focus}\n**Duration:** ${formData.duration} minutes\n\n---\n\n## üéØ Topic\n${lessonPlan.topic}\n\n## üìù Vocabulary\n${lessonPlan.vocabulary.map((word, i) => `${i + 1}. **${word}**`).join('\n')}\n\n## üí¨ Discussion Questions\n${lessonPlan.discussionQuestions.map((q, i) => `${i + 1}. ${q}`).join('\n')}\n\n## ‚ú® Quote of the Day\n> *"${lessonPlan.quote}"*\n> ‚Äî ${lessonPlan.quoteAuthor}\n\n---\n\n*Generated by WA ‚Äî Words Between Worlds*`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `lesson-plan-${formData.level}-${Date.now()}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="lesson-planner">
      <div className="planner-header">
        <h2>‚ú® Smart Lesson Planner</h2>
        <p>Create beautiful lesson plans in seconds</p>
      </div>

      <div className="planner-content">
        <div className="planner-form">
          <div className="form-group">
            <label htmlFor="level">English Level</label>
            <select
              id="level"
              value={formData.level}
              onChange={(e) => setFormData({ ...formData, level: e.target.value })}
            >
              <option value="A1">A1 - Beginner</option>
              <option value="A2">A2 - Elementary</option>
              <option value="B1">B1 - Intermediate</option>
              <option value="B2">B2 - Upper Intermediate</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="focus">Lesson Focus</label>
            <select
              id="focus"
              value={formData.focus}
              onChange={(e) => setFormData({ ...formData, focus: e.target.value })}
            >
              <option value="conversation">Conversation</option>
              <option value="vocabulary">Vocabulary</option>
              <option value="grammar">Grammar</option>
              <option value="pronunciation">Pronunciation</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="duration">Duration (minutes)</label>
            <input
              type="number"
              id="duration"
              value={formData.duration}
              onChange={(e) => setFormData({ ...formData, duration: e.target.value })}
              min="15"
              max="120"
              step="15"
            />
          </div>

          <button
            className="generate-btn"
            onClick={generateLesson}
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <span className="spinner">‚è≥</span>
                Generating...
              </>
            ) : (
              <>
                <span>ü™Ñ</span>
                Generate Lesson Plan
              </>
            )}
          </button>
        </div>

        {lessonPlan && (
          <div className="lesson-plan-card">
            <div className="plan-header">
              <div className="plan-meta">
                <span className="plan-badge">{formData.level}</span>
                <span className="plan-badge">{formData.focus}</span>
                <span className="plan-badge">{formData.duration} min</span>
              </div>
            </div>

            <div className="plan-section">
              <h3>üéØ Topic</h3>
              <p className="topic-title">{lessonPlan.topic}</p>
            </div>

            <div className="plan-section">
              <h3>üìù Vocabulary</h3>
              <div className="vocab-grid">
                {lessonPlan.vocabulary.map((word, index) => (
                  <span key={index} className="vocab-item">{word}</span>
                ))}
              </div>
            </div>

            <div className="plan-section">
              <h3>üí¨ Discussion Questions</h3>
              <ul className="questions-list">
                {lessonPlan.discussionQuestions.map((question, index) => (
                  <li key={index}>{question}</li>
                ))}
              </ul>
            </div>

            <div className="plan-section quote-section">
              <h3>‚ú® Quote of the Day</h3>
              <blockquote>
                <p>"{lessonPlan.quote}"</p>
                <cite>‚Äî {lessonPlan.quoteAuthor}</cite>
              </blockquote>
            </div>

            <div className="plan-actions">
              <button className="action-btn copy-btn" onClick={copyToClipboard}>
                üìã Copy to Clipboard
              </button>
              <button className="action-btn download-btn" onClick={downloadAsMarkdown}>
                üíæ Download as Markdown
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default LessonPlanner;
