name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - replit-agent
  pull_request:
    branches:
      - main
      - replit-agent
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write
  actions: read
  security-events: write

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: backerjr/waapp

jobs:
  # ============================================================================
  # JOB: Build and Test
  # ============================================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        run: npm run lint --if-present
        continue-on-error: true

      - name: Run type check
        run: npm run type-check --if-present
        continue-on-error: true

      - name: Run tests
        run: npm test --if-present

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::Build failed - dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "::error::Build failed - dist/index.html not found"
            exit 1
          fi
          echo "✅ Build successful - dist directory verified"
          ls -lah dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7
          if-no-files-found: error

      - name: Report build size
        run: |
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "::notice title=Build Size::Distribution bundle size: $DIST_SIZE"

  # ============================================================================
  # JOB: Deploy to GitHub Pages
  # ============================================================================
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 10
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/replit-agent')
    permissions:
      contents: write  # Required to push to gh-pages branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "::error::Build artifacts missing or incomplete"
            exit 1
          fi
          echo "✅ Build artifacts verified"
          ls -lah dist/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy ${{ github.sha }}'

      - name: Deployment summary
        run: |
          echo "::notice title=Deployment Complete::Successfully deployed to GitHub Pages"
          echo "::notice title=Pages URL::https://backerjr.github.io/WAapp/"

  # ============================================================================
  # JOB: Build and Push Docker Images
  # ============================================================================
  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 25
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/replit-agent')
    
    strategy:
      matrix:
        variant: [nginx, caddy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "::error::Build artifacts missing"
            exit 1
          fi
          echo "✅ Build artifacts ready for Docker"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            prefix=${{ matrix.variant }}-
            latest=auto
          tags: |
            type=ref,event=branch
            type=sha,prefix=${{ matrix.variant }}-
            type=raw,value=${{ matrix.variant }}-latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.variant }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.variant }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant }}-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }}-${{ github.ref_name }}

      - name: Output image tags
        run: |
          echo "::notice title=Docker Image Published::${{ matrix.variant }} image successfully built and pushed"
          echo "Published tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "  - $tag"
          done

  # ============================================================================
  # JOB: Deployment Summary
  # ============================================================================
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-pages, docker-build-push]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/replit-agent')
    timeout-minutes: 2
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "✅ **Build & Test:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build & Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-pages.result }}" == "success" ]; then
            echo "✅ **GitHub Pages:** Deployed" >> $GITHUB_STEP_SUMMARY
            echo "   - URL: https://backerjr.github.io/WAapp/" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **GitHub Pages:** Skipped or Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-build-push.result }}" == "success" ]; then
            echo "✅ **Docker Images:** Published to GHCR" >> $GITHUB_STEP_SUMMARY
            echo "   - nginx: \`ghcr.io/backerjr/waapp:nginx-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "   - caddy: \`ghcr.io/backerjr/waapp:caddy-latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Docker Images:** Skipped or Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Pipeline completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "::error::Build and test job failed"
            exit 1
          fi
          
          if [ "${{ needs.deploy-pages.result }}" == "failure" ]; then
            echo "::warning::GitHub Pages deployment failed"
          fi
          
          if [ "${{ needs.docker-build-push.result }}" == "failure" ]; then
            echo "::warning::Docker image build/push failed"
          fi
          
          echo "::notice title=Pipeline Status::CI/CD pipeline completed successfully"
