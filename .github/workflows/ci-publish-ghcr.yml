name: CI / Test / Build & Publish (GHCR)

on:
  push:
    branches: [ 'replit-agent' ]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        run: npm ci
      - name: Run tests
        run: npm test

  build-and-push:
    name: Build & push nginx Docker image to GHCR
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps & Build
        run: |
          npm ci
          npm run build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR (use GHCR_PAT if present)
        if: ${{ secrets.GHCR_PAT }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR (fallback to GITHUB_TOKEN)
        if: ${{ !secrets.GHCR_PAT }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push nginx image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.nginx
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/rozmowa:nginx-latest
            ghcr.io/${{ github.repository_owner }}/rozmowa:nginx-${{ github.sha }}

      - name: Build and push caddy image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.caddy
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/rozmowa:caddy-latest
            ghcr.io/${{ github.repository_owner }}/rozmowa:caddy-${{ github.sha }}

      - name: Skip image smoke here (images will be tested in separate job)
        run: echo "Images built and pushed; smoke tests run in 'test-images' job"

  test-images:
    name: Pull and smoke-test pushed images (nginx & caddy)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Login to GHCR (use GHCR_PAT if present)
        if: ${{ secrets.GHCR_PAT }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Login to GHCR (fallback to GITHUB_TOKEN)
        if: ${{ !secrets.GHCR_PAT }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and run nginx image
        env:
          IMAGE_NGINX: ghcr.io/${{ github.repository_owner }}/rozmowa:nginx-latest
        run: |
          docker pull "$IMAGE_NGINX"
          docker run -d --name rozmowa-nginx-ci -p 8080:80 "$IMAGE_NGINX"
          for i in $(seq 1 12); do
            if nc -z -w 1 localhost 8080 >/dev/null 2>&1; then
              echo "nginx image up"; break
            fi
            sleep 1
          done
          docker logs rozmowa-nginx-ci || true
          docker rm -f rozmowa-nginx-ci || true

      - name: Pull and run caddy image
        env:
          IMAGE_CADDY: ghcr.io/${{ github.repository_owner }}/rozmowa:caddy-latest
        run: |
          docker pull "$IMAGE_CADDY"
          docker run -d --name rozmowa-caddy-ci -p 8081:80 "$IMAGE_CADDY"
          for i in $(seq 1 12); do
            if nc -z -w 1 localhost 8081 >/dev/null 2>&1; then
              echo "caddy image up"; break
            fi
            sleep 1
          done
          docker logs rozmowa-caddy-ci || true
          docker rm -f rozmowa-caddy-ci || true

  make-ghcr-public:
    name: Attempt to make GHCR package public
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    steps:
      - name: Try to set package visibility (detect org vs user)
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const pkg = 'rozmowa';
            // Detect if owner is an org
            let isOrg = false;
            try {
              await github.request('GET /orgs/{org}', { org: owner });
              isOrg = true;
            } catch (err) {
              core.info(`${owner} is not an org (or cannot be queried): ${err.message}`);
            }

            if (isOrg) {
              try {
                await github.request('PUT /orgs/{org}/packages/container/{package_name}/visibility', {
                  org: owner,
                  package_name: pkg,
                  data: { visibility: 'public' }
                });
                core.info('Set org package visibility to public');
                return;
              } catch (e) {
                core.warning(`Failed to set org package visibility: ${e.message}`);
              }
            }

            // Fallback to user package endpoint
            try {
              await github.request('PUT /user/packages/container/{package_name}/visibility', {
                package_name: pkg,
                data: { visibility: 'public' }
              });
              core.info('Set user package visibility to public');
            } catch (e) {
              core.warning(`Failed to set user package visibility: ${e.message}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  set-pages-source:
    name: Set Pages source (one-off)
    runs-on: ubuntu-latest
    steps:
      - name: Set Pages source to gh-pages root
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAGES_PAT }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            try {
              await github.request('PATCH /repos/{owner}/{repo}/pages', {
                owner,
                repo,
                source: { branch: 'gh-pages', path: '/' }
              });
              core.info('Pages source set to gh-pages /');
            } catch (e) {
              core.setFailed(`Failed to set Pages source: ${e.message}`);
            }

