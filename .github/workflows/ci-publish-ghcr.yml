name: CI & Publish to GHCR

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

 fix/yaml-indentation-deploy-pages
permissions:
  contents: read
  packages: write
  pages: write
  id-token: write
  actions: read

env:
  IMAGE_NAME_ORIG: ${{ github.event.repository.name }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
 replit-agent

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        run: npm run lint --if-present
        continue-on-error: true

      - name: Run type check
        run: npm run type-check --if-present
        continue-on-error: true

      - name: Run tests
 fix/yaml-indentation-deploy-pages
        run: npx vitest run src/__tests__/ci-workflows.test.ts

  build-and-push:
    name: Build & push Docker images to GHCR
    runs-on: ubuntu-latest
    needs: test
    if: toLower(github.repository_owner) == 'backerjr' && github.event_name == 'push'
    outputs:
      repo_owner_lower: ${{ steps.lowercase_owner.outputs.repository_owner }}
      repo_name_lower: ${{ steps.lowercase_repo.outputs.repository_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install deps & Build
        run: |
          npm ci
          npm run build
      
      - name: Convert repository owner to lowercase
        id: lowercase_owner
        run: |
          echo "repository_owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Convert repository name to lowercase
        id: lowercase_repo
        run: |
          echo "repository_name=$(echo ${{ env.IMAGE_NAME_ORIG }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GHCR
        uses: docker/login-action@v2

        run: npm test --if-present

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::Build failed - dist directory not found"
            exit 1
          fi
          echo "✅ Build successful - dist directory exists"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7
          if-no-files-found: error

      - name: Report build size
        run: |
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "::notice title=Build Size::Distribution bundle size: $DIST_SIZE"

  publish-image:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
 replit-agent
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
 fix/yaml-indentation-deploy-pages
          
      - name: Build and push nginx image
        uses: docker/build-push-action@v4


      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
 replit-agent
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
 fix/yaml-indentation-deploy-pages
            ghcr.io/${{ steps.lowercase_owner.outputs.repository_owner }}/${{ steps.lowercase_repo.outputs.repository_name }}:nginx-latest
            ghcr.io/${{ steps.lowercase_owner.outputs.repository_owner }}/${{ steps.lowercase_repo.outputs.repository_name }}:nginx-${{ github.sha }}

            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=WAapp
            org.opencontainers.image.description=Language Learning Web Application
            org.opencontainers.image.vendor=${{ github.repository_owner }}
 replit-agent

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
 fix/yaml-indentation-deploy-pages
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ steps.lowercase_owner.outputs.repository_owner }}/${{ steps.lowercase_repo.outputs.repository_name }}:caddy-latest
            ghcr.io/${{ steps.lowercase_owner.outputs.repository_owner }}/${{ steps.lowercase_repo.outputs.repository_name }}:caddy-${{ github.sha }}

          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

      - name: Generate image summary
        run: |
          echo "## Docker Image Published 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
 replit-agent

      - name: Image digest
        run: echo "Image published with digest ${{ steps.docker_build.outputs.digest }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
 fix/yaml-indentation-deploy-pages
    needs: build-and-push
    if: github.repository_owner == 'backerjr' && github.event_name == 'push'

    needs: publish-image
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      id-token: write
    
 replit-agent
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

 fix/yaml-indentation-deploy-pages
      - name: Pull and run nginx image
        env:
          IMAGE_NGINX: ghcr.io/${{ needs.build-and-push.outputs.repo_owner_lower }}/${{ needs.build-and-push.outputs.repo_name_lower }}:nginx-latest
        run: |
          docker pull "$IMAGE_NGINX"
          docker run -d --name waapp-nginx-ci -p 8080:80 "$IMAGE_NGINX"

          # Retry until nginx responds (30 attempts, 2s apart)
          for i in {1..30}; do
            if curl --fail --silent --show-error http://localhost:8080; then
              echo "nginx is ready"
              break
            fi
            echo "Waiting for nginx to be ready... ($i/30)"
            sleep 2
          done

          if ! curl --fail --silent http://localhost:8080; then
            echo "ERROR: nginx did not respond on http://localhost:8080" >&2
            docker logs waapp-nginx-ci || true
            docker rm -f waapp-nginx-ci || true
            exit 1
          fi

          docker logs waapp-nginx-ci || true
          docker rm -f waapp-nginx-ci || true

      - name: Pull and run caddy image
        env:
          IMAGE_CADDY: ghcr.io/${{ needs.build-and-push.outputs.repo_owner_lower }}/${{ needs.build-and-push.outputs.repo_name_lower }}:caddy-latest
        run: |
          docker pull "$IMAGE_CADDY"
          docker run -d --name waapp-caddy-ci -p 8081:80 "$IMAGE_CADDY"

          # Retry until caddy responds (use --retry-connrefused and check headers)
          for i in {1..30}; do
            if curl --fail --silent --show-error --retry 3 --retry-delay 1 --retry-connrefused http://localhost:8081/; then
              echo "caddy is ready"
              break
            fi
            echo "Waiting for caddy to be ready... ($i/30)"
            sleep 2
          done

          # If still not ready, dump container logs and fail
          if ! curl --fail --silent http://localhost:8081/; then
            echo "ERROR: caddy did not respond on http://localhost:8081" >&2
            echo "Container status:"
            docker ps -a --filter "name=waapp-caddy-ci"
            echo "Container logs:"
            docker logs waapp-caddy-ci || true
            docker rm -f waapp-caddy-ci || true
            exit 1
          fi

          docker logs waapp-caddy-ci || true
          docker rm -f waapp-caddy-ci || true

  make-ghcr-public:
    name: Attempt to make GHCR package public
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && toLower(github.repository_owner) == 'backerjr'
    steps:
      - name: Try to set package visibility
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const pkg = '${{ needs.build-and-push.outputs.repo_name_lower }}';
            try {
              await github.rest.packages.setAccessibilityForPackageOwnedByUser({
                package_type: 'container',
                package_name: pkg,
                username: owner,
                visibility: 'public'
              });
              core.info(`Set user package visibility for '${pkg}' to public`);
            } catch (e) {
              core.warning(`Failed to set user package visibility: ${e.message}`);
              core.warning('This may be expected if the repository is owned by an organization.');
            }

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-image]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check deployment status
        run: |
          if [ "${{ needs.publish-image.result }}" == "success" ]; then
            echo "::notice title=Deployment Status::✅ Successfully built and published to GHCR"
          else
            echo "::warning title=Deployment Status::❌ Deployment failed or was skipped"
          fi
 replit-agent
