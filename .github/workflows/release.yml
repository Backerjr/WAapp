name: Release Build & Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        type: string

permissions:
  contents: read
  packages: write

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: backerjr/waapp

jobs:
  release-build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "::error::Build verification failed"
            exit 1
          fi
          echo "✅ Release build verified"
          ls -lah dist/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist-${{ github.sha }}
          path: dist/
          retention-days: 90
          if-no-files-found: error

  docker-release:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    needs: release-build
    timeout-minutes: 30
    
    strategy:
      matrix:
        variant: [nginx, caddy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist-${{ github.sha }}
          path: dist/

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.ref_name }}"
          elif [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="dev-${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            prefix=${{ matrix.variant }}-
            latest=auto
          tags: |
            type=semver,pattern={{version}},prefix=${{ matrix.variant }}-,value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},prefix=${{ matrix.variant }}-,value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},prefix=${{ matrix.variant }}-,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ matrix.variant }}-latest
          labels: |
            org.opencontainers.image.title=RozmoWA ${{ matrix.variant }}
            org.opencontainers.image.description=RozmoWA Language Learning App (${{ matrix.variant }})
            org.opencontainers.image.vendor=backerjr
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      - name: Build and push ${{ matrix.variant }} release image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.variant }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant }}-release
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }}-release
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.release.created_at || github.event.head_commit.timestamp }}

      - name: Image summary
        run: |
          echo "::notice title=${{ matrix.variant }} Image Published::Release image built and pushed"
          echo "Tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "  - $tag"
          done

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [release-build, docker-release]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "## 🎉 Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name || inputs.version || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.release-build.result }}" == "success" ]; then
            echo "✅ **Build:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-release.result }}" == "success" ]; then
            echo "✅ **Docker Images:** Published" >> $GITHUB_STEP_SUMMARY
            echo "   - \`ghcr.io/backerjr/waapp:nginx-latest\`" >> $GITHUB_STEP_SUMMARY
            echo "   - \`ghcr.io/backerjr/waapp:caddy-latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Images:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
